@using System.Data
@using System.Data.SqlClient
@using System.Text
@using LNEC.Data
@using LNEC.Model
@using LNEC.UtilityLibrary.ErrorMgr
@using LNEC_Admin.InfraStructure
@using Utility = LNEC.UtilityLibrary.Utility

@inherits System.Web.Mvc.WebViewPage

@{
    Layout = "";
    if (!HttpContext.Current.User.IsInRole("SponsorAccounting"))
    {
        HttpContext.Current.Response.Write("Sorry, you are not authorized to execute this report. Please contact your department administrator.");
        HttpContext.Current.Response.End();
    }
    if (Context.Request.QueryString["Download"] == "Download")
    {
        ProcessRequest();
    }
}

@functions {
    protected void ProcessRequest()
    {
        var reports = new LNEC.BusinessLayer.ReportsBusinessLayer(new HttpContextWrapper(HttpContext.Current));

        reports.Hcon = HttpContext.Current;
        var req = reports.Hcon.Request;
        reports.ReportPath = "~/Views/Reports/Blob/SponsorAccounting.rdlc";

        var parms = new Dictionary<string, string>
            {
                {"DateFrom", req.QueryString["df"]}, 
                {"DateTo", req.QueryString["dt"]}, 
                {"ProfileType", req.QueryString["pt"]}, 
                {"RecipientCompany", req.QueryString["rc"]}, 
                {"RequestorName", req.QueryString["rn"]}
            };

        reports.ReportType = req.QueryString["rt"];

        reports.FileName = "SponsorshipAccounting" + reports.GetReportExtension();

        var reportDef = new BlobVirtualFile(reports.ReportPath).Open();
            
        reports.WriteOut(reports.GetReport(
            reportDef,
            "Sponsorship",
            GetAccountingData(parms),
            parms
            ));
        Context.Response.End();
    }
    
    protected SqlDataReader GetAccountingData(Dictionary<string, string> parms)
    {
        var sConnectionString = new LNECEntities().Database.Connection.ConnectionString;
        var conn = new SqlConnection(sConnectionString);
        conn.Open();
        var comm = new SqlCommand
            {
                Connection = conn, CommandType = CommandType.Text, CommandText = GetSql()
            };

        comm.Parameters.AddWithValue("@DeptID", Utility.GetClaim(HttpContext.Current, ClaimTypesLNEC.DeptID));
        comm.Parameters.AddWithValue("@DateFrom", parms["DateFrom"]);
        comm.Parameters.AddWithValue("@DateTo", parms["DateTo"]);
        comm.Parameters.AddWithValue("@ProfileType", parms["ProfileType"] + "%");
        comm.Parameters.AddWithValue("@RecipientCompany", parms["RecipientCompany"] + "%");
        comm.Parameters.AddWithValue("@RequestorName", parms["RequestorName"] + "%");

        //var emgr = new ErrorMgr(ErrorDest.Sql);
        //emgr.InsertError(new Exception("SQL for report:"), "SQL: \r\n" + comm.CommandText + "\r\nParms: \r\n" + String.Join(", ", parms.Select(pair => pair.Key + " = " + pair.Value)));

        return comm.ExecuteReader();
    }
    protected string GetSql()
    {
        var s = new StringBuilder();
	    s.Append("SELECT ");
	    s.Append("	r.ID, ");
	    s.Append("	r.UserID, ");
	    s.Append("	r.PaymentType, ");
	    s.Append("	r.RequestorType, ");
	    s.Append("	r.RequestDate, ");
	    s.Append("	r.TicketDatePrinted, ");
	    s.Append("	e.Name AS RequestorName, ");
	    s.Append("	a.Name AS AccountName, ");
	    s.Append("	v.Name AS VenueName, ");
	    s.Append("	r.EventDate, ");
	    s.Append("	r.EventName, ");
	    s.Append("	r.RecipientName, ");
	    s.Append("	r.RecipientCompany, ");
	    s.Append("	r.TicketsRequested, ");
	    s.Append("	r.TicketsApproved, ");
	    s.Append("	r.TicketPrice, ");
	    s.Append("	r.TicketServiceChg, ");
	    s.Append("	r.TicketExecChg, ");
	    s.Append("	r.TicketAddtlChg, ");
	    s.Append("	r.TicketsApproved * r.TicketPrice AS TotalPrice,  ");
	    s.Append("	r.TicketsApproved * r.TicketServiceChg AS TotalSC,  ");
	    s.Append("	r.TicketsApproved * r.TicketExecChg AS TotalETC,  ");
	    s.Append("	r.TicketsApproved * r.TicketAddtlChg AS TotalAC, ");
	    s.Append("	r.ParkingCharge, ");
	    s.Append("		(r.TicketsApproved * r.TicketPrice)  ");
	    s.Append("		+ (r.TicketsApproved * r.TicketServiceChg)  ");
	    s.Append("		+ (r.TicketsApproved * r.TicketExecChg)  ");
	    s.Append("		+ (r.TicketsApproved * r.TicketAddtlChg)  ");
	    s.Append("		+ r.ParkingCharge  ");
	    s.Append("	AS Total_Total ");
	    s.Append("FROM ");
	    s.Append("	dbo.Users p INNER JOIN dbo.Employees e ON (p.EmployeeID=e.ID) ");
	    s.Append("	INNER JOIN dbo.TicketRequests r ON p.ID = r.UserID ");
	    s.Append("	INNER JOIN dbo.Accounts a on (a.ID = r.AccountID) ");
	    s.Append("	INNER JOIN dbo.Venues v ON r.TMVenueID = v.TMVenueID ");
	    s.Append("WHERE ");
	    s.Append("	r.DeptID = @DeptID ");
        s.Append("  AND v.DepartmentId = @DeptID ");
	    s.Append("	AND ");
	    s.Append("	r.TicketDatePrinted BETWEEN @DateFrom AND @DateTo ");
	    s.Append("	AND  ");
	    s.Append("	(r.RecipientCompany LIKE @RecipientCompany OR (@RecipientCompany='%' AND r.RecipientCompany IS NULL)) ");
	    s.Append("	AND ");
	    s.Append("	(a.Name LIKE @RequestorName) ");
	    s.Append("	AND  ");
        s.Append("	r.RequestorType LIKE @ProfileType         ");
        return s.ToString();
    }
}
@{
    var reportVersion = "[% ReportVersion %]";
    if (reportVersion == "[% ReportVersion %]") {reportVersion="1.0";}
}
<style type="text/css">
    table {
        border-spacing: 5px;
    }

</style>
<form method="Get" action="/Reports/Run/SponsorAccounting.cshtml">
<h3>Sponsor Accounting</h3>
<div id="divSponsorParms">
    <table width="100%" border="0" cellspacing="0" cellpadding="5">
    <tr>
        <td>Request Type</td>
        <td><select id="rptRequestType" name="pt">
                <option value="Local">Local</option>
                <option value="National">National</option>
            </select>
        </td>
    </tr>
    <tr>
        <td>From</td>
        <td><input type="text" id="rptDateFromFilter" name="df" size="16" value="1/1/@DateTime.Now.Year" /></td>
    </tr>
    <tr>
        <td>To</td>
        <td><input type="text" id="rptDateToFilter" name="dt" size="16" value="@DateTime.Now.Month/1/@DateTime.Now.Year" /></td>
    </tr>
    <tr>
        <td>Filter by Account</td>
        <td><input type="text" size="16" id="rptSponsorCompanyList" name="rc" /></td>
    </tr>
    <tr>
        <td>Requestor</td>
        <td><input type="text" id="rptRequestorFilter" name="rn" size="16" /></td>
    </tr>
        <tr>
            <td>Report Type</td>
            <td><select id="rptSponsorReportType" name="rt">
                    <option value="PDF">PDF</option>
                    <option value="Excel">Excel</option>
                    <option value="HTML">HTML</option>
                </select></td>
        </tr>
        <tr>
            <td colspan="2">
                <div style="color:#808080;font-style:italic;margin-top:8px;">
                    Version: <span id="ReportVersion">@reportVersion</span>
                </div>
            </td>
        </tr>
    </table>
    <br />
    <input type="submit" name="Download" value="Download" />
    <script>
        $("#rptDateFromFilter, #rptDateToFilter").datepicker();
    </script>
 </div>
</form>